/**
 * generated by Xtext
 */
package at.fhj.gaar.androidapp.validation;

import at.fhj.gaar.androidapp.appDsl.ActionStartActivity;
import at.fhj.gaar.androidapp.appDsl.ActionStartService;
import at.fhj.gaar.androidapp.appDsl.Activity;
import at.fhj.gaar.androidapp.appDsl.ActivityLayoutAttribute;
import at.fhj.gaar.androidapp.appDsl.AppDslPackage;
import at.fhj.gaar.androidapp.appDsl.Application;
import at.fhj.gaar.androidapp.appDsl.ApplicationAttribute;
import at.fhj.gaar.androidapp.appDsl.ApplicationElement;
import at.fhj.gaar.androidapp.appDsl.ApplicationElementList;
import at.fhj.gaar.androidapp.appDsl.ApplicationMainActivity;
import at.fhj.gaar.androidapp.appDsl.ApplicationPermissionList;
import at.fhj.gaar.androidapp.appDsl.Button;
import at.fhj.gaar.androidapp.appDsl.ElementIntentList;
import at.fhj.gaar.androidapp.appDsl.LayoutElement;
import at.fhj.gaar.androidapp.validation.AbstractAppDslValidator;
import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class AppDslValidator extends AbstractAppDslValidator {
  private static Logger logger = Logger.getLogger("DslValidation");
  
  @Check
  public void disallowDuplicateApplicationAttributes(final Application application) {
    AppDslValidator.logger.info("disallowDuplicateApplicationAttributes");
  }
  
  @Check
  public void checkCompileSdkBounds(final Application application) {
    AppDslValidator.logger.info("checkCompileSdkBounds");
  }
  
  @Check
  public void checkTargetSdkBounds(final Application application) {
    AppDslValidator.logger.info("checkTargetSdkBounds");
  }
  
  @Check
  public void checkForValidMainActivity(final ApplicationMainActivity mainActivity) {
    AppDslValidator.logger.info("checkForValidMainActivity");
    String _launcherActivity = mainActivity.getLauncherActivity();
    int _length = _launcherActivity.length();
    boolean _equals = (_length == 0);
    if (_equals) {
      AppDslValidator.logger.info("checkForValidMainActivity: launcherActivity string is empty");
      return;
    }
    EObject _eContainer = mainActivity.eContainer();
    Application application = ((Application) _eContainer);
    ApplicationElementList elementList = null;
    EList<ApplicationAttribute> _attributes = application.getAttributes();
    Iterator appIterator = _attributes.iterator();
    while ((appIterator.hasNext() && Objects.equal(elementList, null))) {
      {
        Object _next = appIterator.next();
        ApplicationAttribute attr = ((ApplicationAttribute) _next);
        if ((attr instanceof ApplicationElementList)) {
          elementList = ((ApplicationElementList)attr);
        }
      }
    }
    boolean _equals_1 = Objects.equal(elementList, null);
    if (_equals_1) {
      AppDslValidator.logger.warning("checkForValidMainActivity: no element list found, aborting");
      return;
    }
    EList<ApplicationElement> _elements = elementList.getElements();
    for (final ApplicationElement element : _elements) {
      boolean _and = false;
      if (!(element instanceof Activity)) {
        _and = false;
      } else {
        String _className = element.getClassName();
        String _launcherActivity_1 = mainActivity.getLauncherActivity();
        boolean _equals_2 = _className.equals(_launcherActivity_1);
        _and = _equals_2;
      }
      if (_and) {
        return;
      }
    }
    String _launcherActivity_2 = mainActivity.getLauncherActivity();
    String _format = String.format("Activity with identifier \"%s\" is unknown", _launcherActivity_2);
    this.error(_format, 
      AppDslPackage.Literals.APPLICATION_MAIN_ACTIVITY__LAUNCHER_ACTIVITY);
  }
  
  @Check
  public void checkForDuplicatePermission(final ApplicationPermissionList permissions) {
    AppDslValidator.logger.info("checkForDuplicatePermission");
    List<String> foundPermissions = new ArrayList<String>();
    int listIndex = 0;
    EList<String> _permissions = permissions.getPermissions();
    for (final String permission : _permissions) {
      {
        boolean _contains = foundPermissions.contains(permission);
        if (_contains) {
          this.error("Permissions have to be unique", AppDslPackage.Literals.APPLICATION_PERMISSION_LIST__PERMISSIONS, listIndex);
        }
        foundPermissions.add(permission);
        listIndex++;
      }
    }
  }
  
  @Check
  public void checkForDuplicateIntent(final ElementIntentList intents) {
    AppDslValidator.logger.info("checkForDuplicateIntent");
    List<String> foundIntents = new ArrayList<String>();
    int listIndex = 0;
    EList<String> _intents = intents.getIntents();
    for (final String intent : _intents) {
      {
        boolean _contains = foundIntents.contains(intent);
        if (_contains) {
          this.error("Intents have to be unique", AppDslPackage.Literals.ELEMENT_INTENT_LIST__INTENTS, listIndex);
        }
        foundIntents.add(intent);
        listIndex++;
      }
    }
  }
  
  @Check
  public void checkForDuplicateElementIdentifier(final ApplicationElementList elements) {
    AppDslValidator.logger.info("checkForDuplicateElementIdentifier");
    List<String> foundElementNames = new ArrayList<String>();
    EList<ApplicationElement> _elements = elements.getElements();
    for (final ApplicationElement element : _elements) {
      {
        String _className = element.getClassName();
        boolean _contains = foundElementNames.contains(_className);
        if (_contains) {
          String _className_1 = element.getClassName();
          String _format = String.format("Identifier \"%s\" has already been used", _className_1);
          this.error(_format, element, 
            AppDslPackage.Literals.APPLICATION_ELEMENT__CLASS_NAME);
        }
        String _className_2 = element.getClassName();
        foundElementNames.add(_className_2);
      }
    }
  }
  
  @Check
  public void checkForDuplicateButtonIdentifier(final ActivityLayoutAttribute layoutElements) {
    AppDslValidator.logger.info("checkForDuplicateButtonIdentifier");
    List<String> foundNames = new ArrayList<String>();
    EList<LayoutElement> _layoutElements = layoutElements.getLayoutElements();
    for (final LayoutElement element : _layoutElements) {
      if ((element instanceof Button)) {
        String buttonName = ((Button) element).getButtonName();
        boolean _contains = foundNames.contains(buttonName);
        if (_contains) {
          String _format = String.format("Button name \"%s\" is not unique", buttonName);
          this.error(_format, element, 
            AppDslPackage.Literals.BUTTON__BUTTON_NAME);
        }
        foundNames.add(buttonName);
      }
    }
  }
  
  @Check
  public void checkForValidActionStartActivity(final ActionStartActivity startActivity) {
    AppDslValidator.logger.info("checkForValidActionStartActivity");
  }
  
  @Check
  public void checkForValidActionStartService(final ActionStartService startService) {
    AppDslValidator.logger.info("checkForValidActionStartService");
  }
}
