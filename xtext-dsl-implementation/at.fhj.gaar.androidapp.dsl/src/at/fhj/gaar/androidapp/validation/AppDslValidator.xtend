/*
 * generated by Xtext
 */
package at.fhj.gaar.androidapp.validation
import org.eclipse.xtext.validation.Check
import at.fhj.gaar.androidapp.appDsl.AppDslPackage
import at.fhj.gaar.androidapp.appDsl.Application
import at.fhj.gaar.androidapp.services.AppDslGrammarAccess.ApplicationPermissionListElements
import at.fhj.gaar.androidapp.services.AppDslGrammarAccess.ApplicationElementListElements
import at.fhj.gaar.androidapp.appDsl.ApplicationPermissionList
import at.fhj.gaar.androidapp.appDsl.ApplicationElementList
import at.fhj.gaar.androidapp.appDsl.ElementIntentList
import at.fhj.gaar.androidapp.appDsl.LayoutElement
import java.util.List
import java.util.ArrayList
import at.fhj.gaar.androidapp.appDsl.ActionStartActivity
import at.fhj.gaar.androidapp.appDsl.ActionStartService

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class AppDslValidator extends AbstractAppDslValidator {
    
    @Check
    def void checkCompileSdkBounds(Application application) {
    	
    }
    
    def void checkTargetSdkBounds(Application application) {

    }
    
    @Check
    def void checkForValidMainActivity(Application application) {
    	
    }
    
    @Check
    def void checkForDuplicatePermission(ApplicationPermissionList permissions) {
    	var List<String> foundPermissions = new ArrayList<String>();
    	var int listIndex = 0;
    	
    	for (String permission : permissions.permissions) {
    		if (foundPermissions.contains(permission)) {
    			error("Permissions have to be unique", AppDslPackage$Literals::APPLICATION_PERMISSION_LIST__PERMISSIONS, listIndex);
    		}
    		
    		foundPermissions.add(permission);
    		listIndex++;
    	}
    }
    
    @Check
    def void checkForDuplicateIntent(ElementIntentList intents) {
    	var List<String> foundIntents = new ArrayList<String>();
    	var int listIndex = 0;
    	
    	for (String intent : intents.intents) {
    		if (foundIntents.contains(intent)) {
    			error("Intents have to be unique", AppDslPackage$Literals::ELEMENT_INTENT_LIST__INTENTS, listIndex);
    		}
    		
    		foundIntents.add(intent);
    		listIndex++;
    	}
    }
    
    @Check
    def void checkForDuplicateElementIdentifier(ApplicationElementList elements) {
    	
    }
    
    @Check
    def void checkForDuplicateButtonIdentifier(LayoutElement layoutElement) {
    	
    }
    
    /*
    @Check
    def void checkTargetSdkBounds(Application application) {
    	
	    if (!Character::isUpperCase(entity.getName().charAt(0))) {
		    warning("Name should start with a capital",
		   AppDslPackage$Literals::APPLICATION_MAIN_ACTIVITY__LAUNCHER_ACTIVITY);
	    }
    }
     
    @Check
    def void checkFeatureNameIsUnique(Feature f) {
	    var superEntity = (f.eContainer() as Entity).getSuperType();
	    while (superEntity != null) {
		    for (other : superEntity.getFeatures()) {
		    	if (f.getName().equals(other.getName())) {
		    		error("Feature names have to be unique", DomainmodelPackage$Literals::FEATURE__NAME);
		    	return;
		    	}
		    }
		    
		    superEntity = superEntity.getSuperType();
	    }
    }*/
}
