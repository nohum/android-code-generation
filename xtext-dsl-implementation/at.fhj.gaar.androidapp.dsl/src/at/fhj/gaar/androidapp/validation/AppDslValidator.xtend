/*
 * generated by Xtext
 */
package at.fhj.gaar.androidapp.validation
import org.eclipse.xtext.validation.Check
import at.fhj.gaar.androidapp.appDsl.AppDslPackage
import at.fhj.gaar.androidapp.appDsl.Application
import at.fhj.gaar.androidapp.services.AppDslGrammarAccess.ApplicationPermissionListElements
import at.fhj.gaar.androidapp.services.AppDslGrammarAccess.ApplicationElementListElements
import at.fhj.gaar.androidapp.appDsl.ApplicationPermissionList
import at.fhj.gaar.androidapp.appDsl.ApplicationElementList
import at.fhj.gaar.androidapp.appDsl.ElementIntentList
import at.fhj.gaar.androidapp.appDsl.LayoutElement
import java.util.List
import java.util.ArrayList
import at.fhj.gaar.androidapp.appDsl.ActionStartActivity
import at.fhj.gaar.androidapp.appDsl.ActionStartService
import at.fhj.gaar.androidapp.appDsl.ApplicationElement
import at.fhj.gaar.androidapp.appDsl.Activity
import at.fhj.gaar.androidapp.appDsl.ApplicationMainActivity
import java.util.logging.Logger
import at.fhj.gaar.androidapp.appDsl.ActivityLayoutAttribute
import at.fhj.gaar.androidapp.appDsl.Button
import java.util.logging.Level

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class AppDslValidator extends AbstractAppDslValidator {

	private static Logger logger = Logger.getLogger("DslValidation");

    @Check
    def void checkCompileSdkBounds(Application application) {
    	logger.info("checkCompileSdkBounds");
    }
    
    def void checkTargetSdkBounds(Application application) {
		logger.info("checkTargetSdkBounds");
    }
    
    @Check
    def void checkForValidMainActivity(Application application) {
    	logger.info("checkForValidMainActivity");
    	// there is is this nice limitation that methods only can take one parameter.
    	// so we have to pull out everything by ourselves nicely.
    	
    	
    	
//    	if (elements.elements.length() == 0 || mainActivity.launcherActivity.length() == 0) {
//    		return;
//    	}
    	
//    	for (ApplicationElement element : elements.elements) {
//    		if (element instanceof Activity && element.className.equals(mainActivity.launcherActivity)) {
//    			return; // no break possible in Xtend, so just exit here as everything is ok
//    		}
//    	}
    	
    	error(String.format("Activity with identifier \"%s\" is unknown", mainActivity.launcherActivity),
    		AppDslPackage$Literals::APPLICATION_MAIN_ACTIVITY__LAUNCHER_ACTIVITY
    	);
    }
    
    @Check
    def void checkForDuplicatePermission(ApplicationPermissionList permissions) {
    	logger.info("checkForDuplicatePermission");
    	
    	var List<String> foundPermissions = new ArrayList<String>();
    	var int listIndex = 0;
    	
    	for (String permission : permissions.permissions) {
    		if (foundPermissions.contains(permission)) {
    			error("Permissions have to be unique", AppDslPackage$Literals::APPLICATION_PERMISSION_LIST__PERMISSIONS, listIndex);
    		}
    		
    		foundPermissions.add(permission);
    		listIndex++;
    	}
    }
    
    @Check
    def void checkForDuplicateIntent(ElementIntentList intents) {
    	logger.info("checkForDuplicateIntent");
    	
    	var List<String> foundIntents = new ArrayList<String>();
    	var int listIndex = 0;
    	
    	for (String intent : intents.intents) {
    		if (foundIntents.contains(intent)) {
    			error("Intents have to be unique", AppDslPackage$Literals::ELEMENT_INTENT_LIST__INTENTS, listIndex);
    		}
    		
    		foundIntents.add(intent);
    		listIndex++;
    	}
    }
    
    @Check
    def void checkForDuplicateElementIdentifier(ApplicationElementList elements) {
    	logger.info("checkForDuplicateElementIdentifier");
    	
    	var List<String> foundElementNames = new ArrayList<String>();

    	for (ApplicationElement element : elements.elements) {
    		if (foundElementNames.contains(element.className)) {
    			error(String.format("Identifier \"%s\" has already been used", element.className), element,
    				AppDslPackage$Literals::APPLICATION_ELEMENT__CLASS_NAME
    			);
    		}
    		
    		foundElementNames.add(element.className);
    	}
    }
    
    @Check
    def void checkForDuplicateButtonIdentifier(ActivityLayoutAttribute layoutElements) {
    	logger.info("checkForDuplicateButtonIdentifier");
    	
    	var List<String> foundNames = new ArrayList<String>();

    	for (LayoutElement element : layoutElements.layoutElements) {
    		if (element instanceof Button) {
    			var String buttonName = (element as Button).buttonName;

    			// button names must be unique within an activity
    			if (foundNames.contains(buttonName)) {
    				error(String.format("Button name \"%s\" is not unique", buttonName), element,
    					AppDslPackage$Literals::BUTTON__BUTTON_NAME
    				);
    			}
    			
    			foundNames.add(buttonName);
    		}
    	}
    }
    
    @Check
    def void checkForValidActionStartActivity(ActionStartActivity startActivity) {
    	logger.info("checkForValidActionStartActivity");
    }
    
    @Check
    def void checkForValidActionStartService(ActionStartService startService) {
    	logger.info("checkForValidActionStartService");
    }
}
