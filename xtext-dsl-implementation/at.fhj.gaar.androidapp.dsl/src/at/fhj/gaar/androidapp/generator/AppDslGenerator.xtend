/*
 * generated by Xtext
 */
package at.fhj.gaar.androidapp.generator

import at.fhj.gaar.androidapp.generator.content.ContentGenerator
import java.util.List
import java.util.logging.Logger
import org.eclipse.xtext.generator.IGenerator
import java.util.ArrayList
import at.fhj.gaar.androidapp.generator.content.GradleProjectGenerator
import at.fhj.gaar.androidapp.generator.content.AndroidManifestGenerator
import at.fhj.gaar.androidapp.generator.content.ServiceClassGenerator
import at.fhj.gaar.androidapp.generator.content.BroadcastReceiverClassGenerator
import at.fhj.gaar.androidapp.generator.content.ActivityClassGenerator
import at.fhj.gaar.androidapp.generator.content.ValueResourcesGenerator
import at.fhj.gaar.androidapp.generator.content.LayoutResourcesGenerator
import at.fhj.gaar.androidapp.generator.content.DrawableResourcesGenerator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import at.fhj.gaar.androidapp.appDsl.Application

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class AppDslGenerator implements IGenerator {
	
	private var static Logger logger = Logger.getLogger("DslGeneration");
	
	private var List<ContentGenerator> generators;
	
	/* public */ new() {
		logger.info("initializing DSL generator");

		generators = new ArrayList<ContentGenerator>();
		generators.add(new GradleProjectGenerator());
		generators.add(new AndroidManifestGenerator());
		generators.add(new ServiceClassGenerator());
		generators.add(new BroadcastReceiverClassGenerator());
		generators.add(new ActivityClassGenerator());
		generators.add(new ValueResourcesGenerator());
		generators.add(new LayoutResourcesGenerator());
		generators.add(new DrawableResourcesGenerator());
		
		logger.info(String.format("added %d DSL sub-generators", generators.size()));
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess filesystem) {
		logger.info("START generating source-code from DSL");
		var allApplications = resource.allContents.filter(typeof(Application)).toList;
		
		for (ContentGenerator generator : generators) {
			generator.generate(allApplications, filesystem);
		}
		
		logger.info("FINISHED generating source-code from DSL");
	}
}
